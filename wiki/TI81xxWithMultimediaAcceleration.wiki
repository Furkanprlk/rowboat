#summary Get started building Gingerbread for TI816x or TI814x with support for hardware-accelerated multimedia.

= Introduction =

----

_This page is a *WORK IN PROGRESS*, and should be treated as incomplete until this notice is removed._  Until that time, it is highly unlikely that the step that installs TI's software components will complete successfully, and these components are needed for a successful Android build.

_This page is a *WORK IN PROGRESS*, and should be treated as incomplete until this notice is removed._  Until that time, it is highly unlikely that the step that installs TI's software components will complete successfully, and these components are needed for a successful Android build.

_This page is a *WORK IN PROGRESS*, and should be treated as incomplete until this notice is removed._  Until that time, it is highly unlikely that the step that installs TI's software components will complete successfully, and these components are needed for a successful Android build.

_This page is a *WORK IN PROGRESS*, and should be treated as incomplete until this notice is removed._  Until that time, it is highly unlikely that the step that installs TI's software components will complete successfully, and these components are needed for a successful Android build.

_This page is a *WORK IN PROGRESS*, and should be treated as incomplete until this notice is removed._  Until that time, it is highly unlikely that the step that installs TI's software components will complete successfully, and these components are needed for a successful Android build.

----

This document explains how to build and run Android Gingerbread on TI816x and TI814x with support Multimedia and DSP acceleration.

These instructions have been tested with a fresh installation of Ubuntu 10.04 LTS.  Some steps might be slightly different for other Linux distributions or different Ubuntu versions.

= Initializing Your Build Environment =

Many of the steps in this section are based on instructions in this document:  [http://source.android.com/source/initializing.html]

== Installing Needed Ubuntu Packages ==

For a 64-bit Ubuntu installation, run the following commands:

{{{
sudo apt-get update
sudo apt-get install python-software-properties git-core gnupg flex bison \
  gperf build-essential zip curl zlib1g-dev libc6-dev lib32ncurses5-dev   \
  ia32-libs x11proto-core-dev libx11-dev lib32readline5-dev lib32z1-dev   \
  libgl1-mesa-dev g++-multilib mingw32 tofrodos corkscrew expect
}}}

For a 32-bit Ubuntu installation, run the following commands:

{{{
sudo apt-get update
sudo apt-get install python-software-properties git-core gnupg flex bison \
  gperf build-essential zip curl zlib1g-dev libc6-dev libncurses5-dev     \
  x11proto-core-dev libx11-dev libreadline5-dev libz-dev libgl1-mesa-dev  \
  g++-multilib mingw32 tofrodos corkscrew expect
}}}


== Installing the JDK ==

Run the following commands:

{{{
sudo add-apt-repository "deb http://archive.canonical.com/ lucid partner"
sudo add-apt-repository "deb-src http://archive.canonical.com/ubuntu lucid partner"
sudo apt-get update
sudo apt-get install sun-java6-jdk
}}}

= Downloading the Source =

Many of the steps in this section are based on instructions in this document:  [http://source.android.com/source/downloading.html]

== Proxy Settings ==

If you are behind a proxy server, you need to run the following commands to access the external rowboat repositories.  Replace {{{<http proxy server>:<port>}}} with the name of your http proxy server and proxy port, and configure your https and ftp proxy servers in a similar fashion.

{{{
export http_proxy=<http proxy server>:<port>
export https_proxy=<https proxy server>:<port>
export ftp_proxy=<ftp proxy server>:<port>

cat > ~/git-proxy.sh <<END
#!/bin/sh

CS=/usr/bin/corkscrew
PROXY_HOST=<http proxy server>
PROXY_PORT=<port>
exec \${CS} \${PROXY_HOST} \${PROXY_PORT} \$*
END

chmod a+x ~/git-proxy.sh
git config --global core.gitproxy "${HOME}/git-proxy.sh"
}}}

== Install Repo ==

Run the following commands:

{{{
mkdir ~/bin
PATH=~/bin:$PATH
curl https://android.git.kernel.org/repo > ~/bin/repo
chmod a+x ~/bin/repo
}}}

== Download the Source ==

Run the following commands to download the Android source code:

{{{
mkdir ~/rowboat-android
cd ~/rowboat-android
repo init -u git://gitorious.org/rowboat/manifest.git -m rowboat-gingerbread-ti81xx-mc-dsp.xml
repo sync
}}}

Next, install the TI SDK components needed for multimedia and DSP acceleration:
{{{
cd ~/rowboat-android/hardware/ti/ti81xx
./install_mc_dsp_components.sh
}}}

= Build Android =

If English is not the default locale on your host machine, some package installation scripts will fail due to unexpected non-English output. Set the {{{LANG}}} environment variable as follows to fix it:
{{{
export LANG=C 
}}}

To build Android the command below for the desired platform.  Android and the Linux kernel will be built, as well as the SGX drivers and other kernel modules that are needed for communication with hardware accelerators and codecs.

_*For TI816x:*_
{{{
cd ~/rowboat-android
make TARGET_PRODUCT=ti816xevm OMAPES=6.x
make TARGET_PRODUCT=ti816xevm OMAPES=6.x fs_tarball
}}}

_*For TI814x:*_
{{{
cd ~/rowboat-android
make TARGET_PRODUCT=ti814xevm OMAPES=6.x
make TARGET_PRODUCT=ti814xevm OMAPES=6.x fs_tarball
}}}

On 32-bit systems you will see the following warning:

{{{
build/core/main.mk:79: ************************************************************
build/core/main.mk:80: You are attempting to build on a 32-bit system.
build/core/main.mk:81: Only 64-bit build environments are supported beyond froyo/2.2.
build/core/main.mk:82: ************************************************************
}}}

It is ok to ignore this warning, as rowboat has patched Android to build on 32-bit machines.

*TO BE CONTINUED*

*TO BE CONTINUED*

*TO BE CONTINUED*

*TO BE CONTINUED*

*TO BE CONTINUED*
