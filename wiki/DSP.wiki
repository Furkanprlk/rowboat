#summary This page contains information about enabling hardware acceleration for multimedia features of Android thorugh OpenCore on OMAP3530 and DM3730.

<wiki:toc max_depth="4" />
= Latest Update =
 * 01/23/2011 - rowboat-froyo-dsp.xml updated TI DVSDK package to v4.01.00.09.
   * added H.264 High Profile config parser support on OpenCORE;
   * added MPEG4 ASP and H.264 MP/HP 720P decoding support for DM37x (1GHz only) platforms;
   * removed the ISP Resizer Framecopy in display overlay;
   * fixed the incorrect thumbnail color issue by adding VYUY and BGR565 formats support in OpenCORE color converters;
   * moved the external (media) storage to partition 3 on the SD card;
   * the DM37x and OMAP35x platforms use different dvsdk 4.01 package.
 * ~~12/20/2010 - rowboat-froyo-dsp.xml removed DVSDK4 installation dependency on CodeSourcery toolchain.~~

= Benefits =

The OMAP3530 or DM3730 has a powerful C64x+ DSP core embedded in the SoC. This DSP core can be used for various purposes, including multimedia decoding/encoding.  This offloads the host ARM processor for other general processing tasks and enables decoding of higher bitrate and/or higher resolution video and audio than would otherwise be achievable with Android running on ARM only.

[http://code.google.com/p/rowboat/ Rowboat] DSP support is based on the TI Linux Digital Video Software Development Kit ([http://software-dl.ti.com/dsps/dsps_public_sw/sdo_sb/targetcontent/dvsdk/ DVSDK]) for the OMAP3530/DM3730.

= Software Stack Components =

The following components form a complete software stack needed to work efficiently with DSP. They are provided together as the TI DVSDK or they can be downoaded as individual packages directly from TI.

 # *DSP/BIOS* (and tools)
    * A TI provided realtime operating system for DSP's
    * [http://processors.wiki.ti.com/index.php?title=Category:DSPBIOS DSP/BIOS information on TI E2E]
    * [http://en.wikipedia.org/wiki/SYS/BIOS Wikipedia Overview of DSP/BIOS]
 # *Codec Engine* (and tools)
    * A TI provided framework to enable instantiation/control of Codecs running on DSP from the ARM
    * [http://processors.wiki.ti.com/index.php/Category:Codec_Engine]
 # *DSP/BIOS Link*
    * TI provided driver provided low-level communications between the ARM and the DSP
    * [http://focus.ti.com/docs/training/catalog/events/event.jhtml?sku=WEB108007 DSP/BIOS Link Training Material]
 # *DMAI*
    * The !DaVinci Multimedia Application Interface (DMAI) is a thin utility layer on top of the operating system (Linux or DSP/BIOS) and the Codec Engine (CE) to assist in quickly writing portable applications on a !DaVinci (or OMAP) platform.
    * [http://processors.wiki.ti.com/index.php/Davinci_Multimedia_Application_Interface]
 # *!OpenCore DMAI Codecs*
    * Integration of TI DSP accelerated codecs into the !PacketVideo !OpenCore framework that is provided here on the rowboat Android development site.
    * Technical Details available [http://code.google.com/p/rowboat/wiki/DSPCodecs here]
 # *additional DSP codecs* (optional), for example, mp3 DSP codec

= Building and Testing DSP stack =

== Preparation ==

 # Check if you have _git_, _java5-jdk_, and _expect_ utilities installed on your build host. Use the _which_ command from the Linux prompt to see if they commands are present (i.e. which git)
 # Download _repo_. You can find detailed repo installing instructions [http://source.android.com/source/git-repo.html here]. Make sure ~/bin is in $PATH
{{{
# mkdir -p ~/bin
# curl http://android.git.kernel.org/repo >~/bin/repo
# chmod a+x ~/bin/repo
}}}
 # Download Rowboat Android (Froyo version) with integrated TI DSP stack from gitorious.org/rowboat. Please ensure you have atleast 17GB free space on your hard drive for the source and build temporary files.
    {{{ 
# mkdir ~/rowboat-android
# cd ~/rowboat-android
# repo init -u git://gitorious.org/rowboat/manifest.git -m rowboat-froyo-dsp.xml
# repo sync
    }}}
 # Download the TI DVSDK package to the _external/ti-dsp_ folder manually from the table in webpage [http://software-dl.ti.com/dsps/dsps_public_sw/sdo_sb/targetcontent/dvsdk/DVSDK_4_00/latest/index_FDS.html]. Registration might be needed.
   * For DM37xx platform, download _dvsdk_dm3730-evm_4_01_00_09_setuplinux_ package;
   * For OMAP35xx platform, download _dvsdk_omap3530-evm_4_01_00_09_setuplinux_ package.

== Build ==

Add Android toolchain in $PATH:
    {{{
# export PATH=${HOME}/rowboat-android/prebuilt/linux-x86/toolchain/arm-eabi-4.4.0/bin:$PATH
    }}}
If English is not the locale in your host machine, some package install scripts will fail due to unexpected non-English output. Set env _LANG_ as following to fix it:
    {{{
# export LANG=C 
    }}}
To build Android with TI DSP stack use following command:
   {{{
# cd ~/rowboat-android
# make TARGET_PRODUCT=[omap3evm | beagleboard | igepv2] [OMAPES=(2.x|3.x|5.x)]
   }}}

It builds Android and Linux kernel for the selected platform, TI kernel modules for DSP communication and codec server, and SGX drivers as while. 

Your must specify your board with *TARGET_PRODUCT* variable. Set *OMAPES* variable to install proper version of SGX drivers (Default is 3.x): 
{{{
OMAPES=2.x, for OMAP3530 ES1 or ES2;
OMAPES=3.x, for OMAP3530 ES3.0;
OMAPES=5.x, for DM37x
}}}

After build is finished successfully TI DSP specific kernel modules and codec server are located under the _/system/ti-dsp_ folder in the rootfs. The kernel uImage is in _kernel/arch/arm/boot/_ folder. 

Create the rootfs image, assuming TARGET_PRODUCT=omap3evm in the command above:
    {{{
# cd out/target/product/omap3evm
# mkdir android_rootfs
# cp -r root/* system android_rootfs
# ../../../../build/tools/mktarball.sh ../../../host/linux-x86/bin/fs_get_stats android_rootfs . rootfs rootfs.tar.bz2
    }}}

Download the [http://software-dl.ti.com/dsps/dsps_public_sw/sdo_tii/TI_Android_DevKit/01_00_00/exports/Prebuilt_Images.tar.gz Prebuilt Image Package] and untar it to get _MLO_ and _u-boot_ images.
{{{
# wget http://software-dl.ti.com/dsps/dsps_public_sw/sdo_tii/TI_Android_DevKit/01_00_00/exports/Prebuilt_Images.tar.gz
# tar zxf Prebuilt_Images.tar.gz
}}}

Locate the x-loader and u-boot images for your platform. For OMAP3530 and DM3730, they are _!Prebuilt_Images/OMAP35x_AM37x_EVM/MLO_ and _!Prebuilt_Images/OMAP35x_AM37x_EVM/u-boot.bin_.

Follow the instructions in [http://code.google.com/p/rowboat/wiki/ConfigureAndBuild#Prepare_SD_card ConfigureAndBuild#Prepare_SD_card] to populate the rootfs to a SD card. Before copying _uImage_ to the SD card, first copy _MLO_ to the SD card first partition; also copy _u-boot.bin_ into the same partition. _MLO_ has to be copied first, otherwise the board will not boot.

[http://processors.wiki.ti.com/index.php/How_to_Make_3_Partition_SD_Card How to Make 3 Partition SD Card] wiki is an alternative reference to populate rowboat to a SD card.

== Boot ==

DVSDK DSP stack by default uses physical memory window within the first 128MB. In order not to change DSP stack mappings we recommend to use memory hole settings as in the examples below for boards with more than 128MB DDR. (Don't forget to adjust these parameters for your board)

Boards with 128MB of memory are not tested and not recommended.

You'll probably have kernel crash issue due to v4l2 buffer allocation failure with the omap_vout driver in some cases. To avoid this, try following _bootargs_ additions: {{{ omap_vout.vid1_static_vrfb_alloc=y}}}.

The following is an example of u-boot env setup for DM3730 EVM with 256MB DDR to boot from SD card. (It includes artificial line breaks to maintain a print-friendly document.) 'mpurate=1000' is necessary to decode 720P video clips. *Please use 1GHz verified DM37x devices, otherwise DSP will crash while running at 1GHz.*
{{{
OMAP3_EVM# setenv bootcmd 'mmc init; fatload mmc 0 80800000 uImage; bootm 80800000'
OMAP3_EVM# setenv bootargs 'mem=68M@0x80000000 mem=128M@0x88000000 console=tty0
console=ttyS0,115200n8 androidboot.console=ttyS0 root=/dev/mmcblk0p2 rw rootfstype=ext3
init=/init rootwait ip=off omap_vout.vid1_static_vrfb_alloc=y
omapdss.def_disp=dvi omapfb.mode=dvi:1280x720MR-16 mpurate=1000'
OMAP3_EVM# saveenv
}}}

The following is an example of u-boot env setup for OMAP3530 EVM with 256MB DDR to boot from SD card. (It includes artificial line breaks to maintain a print-friendly document.)
{{{
OMAP3_EVM# setenv bootcmd 'mmc init; fatload mmc 0 80800000 uImage; bootm 80800000'
OMAP3_EVM# setenv bootargs 'mem=104M@0x80000000 mem=128M@0x88000000 console=tty0 
console=ttyS0,115200n8 androidboot.console=ttyS0 root=/dev/mmcblk0p2 rw rootfstype=ext3
init=/init rootwait ip=off omap_vout.vid1_static_vrfb_alloc=y'
OMAP3_EVM# saveenv
}}}

To configure the display to the DVI port append the following options to _bootargs_ above.
{{{
omapdss.def_disp=dvi omapfb.mode=dvi:720x480MR-16
}}}

For more details of display mode see [http://www.mjmwired.net/kernel/Documentation/fb/modedb.txt modedb Documentation].

== Test ==

To test media playback copy media files to the *third* partition of the SD card and use 'Music player' or 'Gallery' UI applications in rowboat. Supported formats are available on [http://code.google.com/p/rowboat/wiki/DSPCodecs#Supported_decoding_formats OMX DSP-accelerated audio/video codecs] wiki page.
Check for 'omx-dsp' tag in logcat to see that accelerated codecs are enabled.

If you have any video clip which should be supported but cannot play on rowboat, please try to extract the video elementary stream and play it with the DVSDK decode demo.

The _top_ command shows the ARM load on DM3730@1GHz is about 4~8% when playing H.264@HP video clips in 720P resolution with AAC codec running on ARM side.


= Known Issues =
 * dragging the playback progress bar causes a/v out of sync with some video clips;


= Some Observations =

 * Now kernel will be reconfigured with the default config only if there is no kernel/.config file so: 
  # If you didn't build kernel before it will be configured with the default config and built.
  # It will rebuild kernel using your config if .config is in place (will take a few seconds if you didn't changed it).
 * DVSDK cleaning is now called only after downloading/installing it to clean up prebuilt stuff.
 * Sometimes Jave VM complains about SIGSEGV during compiling rowboat. Please re-run the make command if it happens.
 * If there is any failure while compiling dvsdk packages, and you want to redo a clean dvsdk build, please delete *external/ti-dsp/already_clean* and *external/ti-dsp/ti-dvsdk`_``<`_version_`>`/* and re-run the build command. If *external/ti-dsp/already_clean* exists, the build script will not install and patch dvsdk packages. Please refer to the top level Makefile for details.


=DVSDK/Android Integration Change Log=
 # Added SYS V IPC into bionic
 # Some 'libpthread' calls are not yet implemented in android (at the moment calls to these API's are disabled in the components that use them):
   * pthread_sigmask
   * pthread_mutexattr_settype
   * pthread_setcanceltype
   * pthread_attr_setinheritsched
 # Modified build files (Makefiles and config.bld) to adapt for Android toolchains
 # Memory holes kernel patches to enable support for memory sizes >128MBytes